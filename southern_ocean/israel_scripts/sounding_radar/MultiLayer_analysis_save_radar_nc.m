function MultiLayer_analysis_save_radar_nc(save_path, nc_Filename, Sounding_nc_filename, sonde, kazr, summary, Num_layers, Control, current_ind, Create_flag)

%----------------------------------------------------------------------------------
%% write global parameters and create fields.
if Create_flag
    nccreate([save_path, nc_Filename], 'site_altitude', 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwrite([save_path, nc_Filename], 'site_altitude', ncread(Sounding_nc_filename, 'site_altitude'))
    ncwriteatt([save_path, nc_Filename], 'site_altitude', 'Units', 'm')
    ncwriteatt([save_path, nc_Filename], 'site_altitude', 'Description', 'Site altitude above MSL')
    nccreate([save_path, nc_Filename], 'site_latitude', 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwrite([save_path, nc_Filename], 'site_latitude', ncread(Sounding_nc_filename, 'site_latitude'))
    ncwriteatt([save_path, nc_Filename], 'site_latitude', 'Units', 'degrees N')
    ncwriteatt([save_path, nc_Filename], 'site_latitude', 'Description', 'Site latitude')
    nccreate([save_path, nc_Filename], 'site_longitude', 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwrite([save_path, nc_Filename], 'site_longitude', ncread(Sounding_nc_filename, 'site_longitude'))
    ncwriteatt([save_path, nc_Filename], 'site_longitude', 'Units', 'degrees E')
    ncwriteatt([save_path, nc_Filename], 'site_longitude', 'Description', 'Site longitude')
    nccreate([save_path, nc_Filename], 'height', 'dimensions', {'Num_layers', Num_layers}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwrite([save_path, nc_Filename], 'height', ncread(Sounding_nc_filename, 'height'))
    ncwriteatt([save_path, nc_Filename], 'height', 'Units', 'm')
    ncwriteatt([save_path, nc_Filename], 'height', 'description', 'height AGL (equivalent to range in cloud mask files)')
    % create sounding fields.
    nccreate([save_path, nc_Filename], 'sonde_time', 'dimensions', {'1', 1, 'Samples', Inf}, 'datatype', 'double', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'sonde_time', 'Units', 's')
    ncwriteatt([save_path, nc_Filename], 'sonde_time', 'Description', ['Radiosonde release time (seconds since 1970-01-01)'])
    nccreate([save_path, nc_Filename], 'sonde_time_datenum', 'dimensions', {'1', 1, 'Samples', Inf}, 'datatype', 'double', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'sonde_time_datenum', 'Description', ['Radiosonde release time (MATLAB''s datenum format)'])
    nccreate([save_path, nc_Filename], 'vert_res_mean', 'dimensions', {'1', 1, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'vert_res_mean', 'Units', 'm')
    ncwriteatt([save_path, nc_Filename], 'vert_res_mean', 'Description', ['(Sounding) Mean vertical resolution (the effective resolution; a function of the ascent rate and the temporal resolution)'])
    nccreate([save_path, nc_Filename], 'asc_mean', 'dimensions', {'1', 1, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'asc_mean', 'Units', 'm/s')
    ncwriteatt([save_path, nc_Filename], 'asc_mean', 'Description', ['(Sounding) Mean ascent rate'])
    nccreate([save_path, nc_Filename], 'lat', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'lat', 'Units', 'Degrees N')
    ncwriteatt([save_path, nc_Filename], 'lat', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'lat', 'Description', ['(Sounding) Radiosonde latitude'])
    nccreate([save_path, nc_Filename], 'lon', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'lon', 'Units', 'Degrees E')
    ncwriteatt([save_path, nc_Filename], 'lon', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'lon', 'Description', ['(Sounding) Radiosonde longitude'])
    nccreate([save_path, nc_Filename], 'p', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'p', 'Units', 'hPa')
    ncwriteatt([save_path, nc_Filename], 'p', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'p', 'Description', ['(Sounding) Pressure'])
    nccreate([save_path, nc_Filename], 't', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 't', 'Units', 'Celsius')
    ncwriteatt([save_path, nc_Filename], 't', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 't', 'Description', ['(Sounding) Temperature'])
    nccreate([save_path, nc_Filename], 'q', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'q', 'Units', 'g/kg')
    ncwriteatt([save_path, nc_Filename], 'q', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'q', 'Description', ['(Sounding) Specific humidity'])
    nccreate([save_path, nc_Filename], 'rh', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'rh', 'Units', '%')
    ncwriteatt([save_path, nc_Filename], 'rh', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'rh', 'Description', ['(Sounding) Relative humidity'])
    nccreate([save_path, nc_Filename], 'rh_i', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'rh_i', 'Units', '%')
    ncwriteatt([save_path, nc_Filename], 'rh_i', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'rh_i', 'Description', ['(Sounding) Relative humidity with respect to ice; using Murphy and Koop (2005)'])
    nccreate([save_path, nc_Filename], 'theta', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'theta', 'Units', 'K')
    ncwriteatt([save_path, nc_Filename], 'theta', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'theta', 'Description', ['(Sounding) Potential temperature'])
    nccreate([save_path, nc_Filename], 'theta_e', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'theta_e', 'Units', 'K')
    ncwriteatt([save_path, nc_Filename], 'theta_e', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'theta_e', 'Description', ['(Sounding) Equivalent potential temperature'])
    nccreate([save_path, nc_Filename], 'u', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'u', 'Units', 'm/s')
    ncwriteatt([save_path, nc_Filename], 'u', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'u', 'Description', ['(Sounding) u component of wind'])
    nccreate([save_path, nc_Filename], 'v', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'v', 'Units', 'm/s')
    ncwriteatt([save_path, nc_Filename], 'v', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'v', 'Description', ['(Sounding) v component of wind'])
    % create kazr fields (if 'kazr_analysis' option is set to true, i.e., non-empty kazr variable).
    if ~isempty(kazr)
        nccreate([save_path, nc_Filename], 'lowest_valid_kazr_ind', 'dimensions', {'1', 1, 'Samples', Inf}, 'datatype', 'double', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'lowest_valid_kazr_ind', 'Units', 's')
        ncwriteatt([save_path, nc_Filename], 'lowest_valid_kazr_ind', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'lowest_valid_kazr_ind', 'Description', ['(KAZR) Index of the lowest grid cell with valid KAZR data [multiply (index - 1) by the vertical resolution to receive height AGL]'])
        nccreate([save_path, nc_Filename], 'win_c_fraction', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'win_c_fraction', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'win_c_fraction', 'Description', ['(KAZR) Cloud occurrence fraction during the ', num2str(sum(Control{4})), ' min window'])
        nccreate([save_path, nc_Filename], 'win_c_m0_mean', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'win_c_m0_mean', 'Units', 'dBZ')
        ncwriteatt([save_path, nc_Filename], 'win_c_m0_mean', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'win_c_m0_mean', 'Description', ['(KAZR) Reflectivity-factor mean of cloudy grid cells during the ', num2str(sum(Control{4})), ' min window (calculated in linear units; no values for cloud grid cells assigned only using sounding)'])
        nccreate([save_path, nc_Filename], 'win_c_m0_sd', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'win_c_m0_sd', 'Units', 'dBZ')
        ncwriteatt([save_path, nc_Filename], 'win_c_m0_sd', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'win_c_m0_sd', 'Description', ['(KAZR) Reflectivity-factor SD of cloudy grid cells during the ', num2str(sum(Control{4})), ' min window (calculated in dB units; no values for cloud grid cells assigned only using sounding)'])
        nccreate([save_path, nc_Filename], 'win_c_m1_mean', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'win_c_m1_mean', 'Units', 'm/s')
        ncwriteatt([save_path, nc_Filename], 'win_c_m1_mean', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'win_c_m1_mean', 'Description', ['(KAZR) Mean Doppler velocity mean of cloudy grid cells during the ', num2str(sum(Control{4})), ' min window (no values for cloud grid cells assigned only using sounding)'])
        nccreate([save_path, nc_Filename], 'win_c_m1_sd', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'win_c_m1_sd', 'Units', 'm/s')
        ncwriteatt([save_path, nc_Filename], 'win_c_m1_sd', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'win_c_m1_sd', 'Description', ['(KAZR) Mean Doppler velocity SD of cloudy grid cells during the ', num2str(sum(Control{4})), ' min window (no values for cloud grid cells assigned only using sounding)'])
        nccreate([save_path, nc_Filename], 'win_c_m2_mean', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'win_c_m2_mean', 'Units', 'm/s')
        ncwriteatt([save_path, nc_Filename], 'win_c_m2_mean', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'win_c_m2_mean', 'Description', ['(KAZR) Spectral width mean of cloudy grid cells during the ', num2str(sum(Control{4})), ' min window (no values for cloud grid cells assigned only using sounding)'])
        nccreate([save_path, nc_Filename], 'win_c_m2_sd', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'win_c_m2_sd', 'Units', 'm/s')
        ncwriteatt([save_path, nc_Filename], 'win_c_m2_sd', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'win_c_m2_sd', 'Description', ['(KAZR) Spectral width SD of cloudy grid cells during the ', num2str(sum(Control{4})), ' min window (no values for cloud grid cells assigned only using sounding)'])
        nccreate([save_path, nc_Filename], 'win_c_m0_xpol_mean', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'win_c_m0_xpol_mean', 'Missing_value', '-9999')
        nccreate([save_path, nc_Filename], 'win_c_m0_xpol_sd', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'win_c_m0_xpol_sd', 'Missing_value', '-9999')
        if ~strcmp(nc_Filename(1:3), 'ena') % Barrow or SGP
            ncwriteatt([save_path, nc_Filename], 'win_c_m0_xpol_mean', 'Units', 'dBZ')
            ncwriteatt([save_path, nc_Filename], 'win_c_m0_xpol_mean', 'Description', ['(KAZR) Cross-polar reflectivity-factor mean of cloudy grid cells during the ', num2str(sum(Control{4})), ' min window (calculated in linear units; no values for cloud grid cells assigned only using sounding)'])
            ncwriteatt([save_path, nc_Filename], 'win_c_m0_xpol_sd', 'Units', 'dBZ')
            ncwriteatt([save_path, nc_Filename], 'win_c_m0_xpol_sd', 'Description', ['(KAZR) Cross-polar reflectivity-factor SD of cloudy grid cells during the ', num2str(sum(Control{4})), ' min window (calculated in dB units; no values for cloud grid cells assigned only using sounding)'])
        else % for ena, LDR instead of xpol reflectivity
            ncwriteatt([save_path, nc_Filename], 'win_c_m0_xpol_mean', 'Units', 'dB')
            ncwriteatt([save_path, nc_Filename], 'win_c_m0_xpol_mean', 'Description', ['(KAZR) Linear depolarization ratio mean of cloudy grid cells during the ', num2str(sum(Control{4})), ' min window (calculated in linear units; no values for cloud grid cells assigned only using sounding)'])
            ncwriteatt([save_path, nc_Filename], 'win_c_m0_xpol_sd', 'Units', 'dB')
            ncwriteatt([save_path, nc_Filename], 'win_c_m0_xpol_sd', 'Description', ['(KAZR) Linear depolarization ratio SD of cloudy grid cells during the ', num2str(sum(Control{4})), ' min window (calculated in dB units; no values for cloud grid cells assigned only using sounding)'])
        end
    end
    % create summary analysis fields.
    if ~isempty(kazr)
        nccreate([save_path, nc_Filename], 'tot_c_mask', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'tot_c_mask', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'tot_c_mask', 'Description', ['(Analysis) Cloud mask (ice + liquid) based on sounding and KAZR (different index for every layer; negative indices when the highest cloudy grid cell is below the lowest valid KAZR data grid cell to avoid biases)'])
        nccreate([save_path, nc_Filename], 'liq_c_mask', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'liq_c_mask', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'liq_c_mask', 'Description', ['(Analysis) Liquid-bearing cloud mask based on sounding (indices match the parent cloud in the total cloud mask; negative indices when the highest liquid layer grid cell is below the lowest valid KAZR data grid cell to avoid biases)'])
    end
    nccreate([save_path, nc_Filename], 'liq_c_mask_unassign', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'liq_c_mask_unassign', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'liq_c_mask_unassign', 'Description', ['(Analysis) Liquid-bearing cloud mask based on sounding with independent indices (unassigned to parent clouds)'])
    if ~isempty(kazr)
        nccreate([save_path, nc_Filename], 'c_h_bel_top', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'c_h_bel_top', 'Units', 'm')
        ncwriteatt([save_path, nc_Filename], 'c_h_bel_top', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'c_h_bel_top', 'Description', ['(Analysis) Depth below cloud top (note that the value is 0 at the top cloudy grid cell; -1 in all cloudy grid cells if the highest cloudy grid cell is below the lowest valid KAZR data grid cell to avoid biases)'])
    end
    nccreate([save_path, nc_Filename], 'l_h_bel_top', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'l_h_bel_top', 'Units', 'm')
    ncwriteatt([save_path, nc_Filename], 'l_h_bel_top', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'l_h_bel_top', 'Description', ['(Analysis) Depth below liquid cloud top (note that the value is 0 at the top liquid grid cell)'])
    nccreate([save_path, nc_Filename], 'sat_rhi_mask', 'dimensions', {'Num_layers', Num_layers, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'sat_rhi_mask', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'sat_rhi_mask', 'Description', ['(Analysis) Saturated RH_i mask based on sounding'])
    if ~isempty(kazr)
        nccreate([save_path, nc_Filename], 'c_num', 'dimensions', {'1', 1, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'c_num', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'c_num', 'Description', ['(Analysis) Number of cloud layers in profile'])
    end
    nccreate([save_path, nc_Filename], 'l_num', 'dimensions', {'1', 1, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'l_num', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'l_num', 'Description', ['(Analysis) Number of liquid-bearing cloud layers in profile'])
    if ~isempty(kazr)
        nccreate([save_path, nc_Filename], 'c_thick', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'c_thick', 'Units', 'm')
        ncwriteatt([save_path, nc_Filename], 'c_thick', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'c_thick', 'Description', ['(Analysis) Cloud thickness per layer in profile (-1 if the highest cloudy grid cell is below the lowest valid KAZR data grid cell to avoid biases)'])
    end
    nccreate([save_path, nc_Filename], 'l_thick', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'l_thick', 'Units', 'm')
    ncwriteatt([save_path, nc_Filename], 'l_thick', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'l_thick', 'Description', ['(Analysis) Liquid cloud thickness per layer in profile'])
    if ~isempty(kazr)
        nccreate([save_path, nc_Filename], 'c_thick_max', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'c_thick_max', 'Units', 'm')
        ncwriteatt([save_path, nc_Filename], 'c_thick_max', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'c_thick_max', 'Description', ['(Analysis) Maximum cloud thickness per layer in profile (-1 if all layers are detected below the lowest valid KAZR data grid cell to avoid biases)'])
    end
    nccreate([save_path, nc_Filename], 'l_thick_max', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'l_thick_max', 'Units', 'm')
    ncwriteatt([save_path, nc_Filename], 'l_thick_max', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'l_thick_max', 'Description', ['(Analysis) Maximum liquid cloud thickness per layer in profile'])
    if ~isempty(kazr)
        nccreate([save_path, nc_Filename], 'c_base', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'c_base', 'Units', 'm')
        ncwriteatt([save_path, nc_Filename], 'c_base', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'c_base', 'Description', ['(Analysis) Cloud base per layer in profile (-1 if the highest cloudy grid cell is below the lowest valid KAZR data grid cell to avoid biases)'])
    end
    nccreate([save_path, nc_Filename], 'l_base', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'l_base', 'Units', 'm')
    ncwriteatt([save_path, nc_Filename], 'l_base', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'l_base', 'Description', ['(Analysis) Liquid cloud base per layer in profile'])
    if ~isempty(kazr)
        nccreate([save_path, nc_Filename], 'c_top', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'c_top', 'Units', 'm')
        ncwriteatt([save_path, nc_Filename], 'c_top', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'c_top', 'Description', ['(Analysis) Cloud top per layer in profile (-1 if the highest cloudy grid cell is below the lowest valid KAZR data grid cell to avoid biases)'])
    end
    nccreate([save_path, nc_Filename], 'l_top', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'single', 'format', 'netcdf4', 'DeflateLevel', 9)
    ncwriteatt([save_path, nc_Filename], 'l_top', 'Units', 'm')
    ncwriteatt([save_path, nc_Filename], 'l_top', 'Missing_value', '-9999')
    ncwriteatt([save_path, nc_Filename], 'l_top', 'Description', ['(Analysis) Liquid cloud top per layer in profile'])
    if ~isempty(kazr)
        nccreate([save_path, nc_Filename], 'l_num_ic', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'l_num_ic', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'l_num_ic', 'Description', ['(Analysis) Number of liquid-bearing cloud layers per cloud layer'])
        nccreate([save_path, nc_Filename], 'l_num_ic_max', 'dimensions', {'1', 1, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'l_num_ic_max', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'l_num_ic_max', 'Description', ['(Analysis) Maximum number of liquid-bearing cloud layers per cloud layer in profile'])
        nccreate([save_path, nc_Filename], 'l_ind', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'l_ind', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'l_ind', 'Description', ['(Analysis) Index of cloud layer associated with each liquid-bearing layer (can be negative if the highest liquid layer grid cell is below the lowest valid KAZR data grid cell to avoid biases)'])
        nccreate([save_path, nc_Filename], 'l_is_ct', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'l_is_ct', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'l_is_ct', 'Description', ['(Analysis) 1 - if the top of the liquid layer corresponds with the top of the parent cloud, otherwise - 0 (-1 if the highest liquid layer grid cell is more than 1 grid cell below the lowest valid KAZR data grid cell to avoid biases)'])
        nccreate([save_path, nc_Filename], 'l_is_highest_l_ic', 'dimensions', {'Max_allowed_layers', Control{7}, 'Samples', Inf}, 'datatype', 'int16', 'format', 'netcdf4', 'DeflateLevel', 9)
        ncwriteatt([save_path, nc_Filename], 'l_is_highest_l_ic', 'Missing_value', '-9999')
        ncwriteatt([save_path, nc_Filename], 'l_is_highest_l_ic', 'Description', ['(Analysis) 1 - if the liquid layer is the highest liquid layer in the parent cloud, otherwise - 0 (-1 if the highest liquid layer grid cell is more than 1 grid cell below the lowest valid KAZR data grid cell to avoid biases)'])
    end
    % write global attributes.
    ncwriteatt([save_path, nc_Filename], '/', 'Site', Control{8})
    ncwriteatt([save_path, nc_Filename], '/', 'Radiosonde RH measurement uncertainty', [num2str(Control{1}), '%'])
    ncwriteatt([save_path, nc_Filename], '/', 'Radiosonde RH saturation threshold', [num2str(Control{2}), '%'])
    ncwriteatt([save_path, nc_Filename], '/', 'Radiosonde minimum liquid layer thickness [m]', num2str(Control{3}))
    ncwriteatt([save_path, nc_Filename], '/', 'Radiosonde lowest data height AGL [m]', num2str(15)) % NOTE: CHANGE MANUALLY.
    if ~isempty(kazr)
        ncwriteatt([save_path, nc_Filename], '/', 'KAZR data window size (from each side of sounding time) [min]', num2str(Control{4}))
        ncwriteatt([save_path, nc_Filename], '/', 'KAZR SNR threshold for cloud detection [dB]', num2str(Control{5}))
        ncwriteatt([save_path, nc_Filename], '/', 'KAZR window cloud-fraction threshold', num2str(Control{6}))
        ncwriteatt([save_path, nc_Filename], '/', 'KAZR minimum cloud layer thickness [m]', '60') % As I remove kazr cloud detection of a single grid cell (30 m), the resultant effective threshold in 60 m.
        ncwriteatt([save_path, nc_Filename], '/', 'KAZR lowest data height AGL [m]', 'Varying at 165-225 m (use the ''lowest_valid_kazr_ind'' array') % NOTE: CHANGE MANUALLY.
    end
    ncwriteatt([save_path, nc_Filename], '/', 'Generated by', 'Israel Silber')
    ncwriteatt([save_path, nc_Filename], '/', 'Date generated', datestr(now))
    return
end
%----------------------------------------------------------------------------------
%% write sounding data.
disp(['Now writing profile #', num2str(current_ind)])
ncwrite([save_path, nc_Filename], 'sonde_time', (sonde.release_t - datenum(1970,1,1)).*24.*3600, [1 current_ind])
ncwrite([save_path, nc_Filename], 'sonde_time_datenum', sonde.release_t, [1 current_ind])
ncwrite([save_path, nc_Filename], 'vert_res_mean', sonde.vert_res_mean, [1 current_ind])
ncwrite([save_path, nc_Filename], 'asc_mean', sonde.asc_mean, [1 current_ind])
ncwrite([save_path, nc_Filename], 'lat', sonde.lat, [1 current_ind])
ncwrite([save_path, nc_Filename], 'lon', sonde.lon, [1 current_ind])
ncwrite([save_path, nc_Filename], 'p', sonde.p, [1 current_ind])
ncwrite([save_path, nc_Filename], 't', sonde.t, [1 current_ind])
ncwrite([save_path, nc_Filename], 'q', sonde.q, [1 current_ind])
ncwrite([save_path, nc_Filename], 'rh', sonde.rh, [1 current_ind])
ncwrite([save_path, nc_Filename], 'rh_i', sonde.rhi, [1 current_ind])
ncwrite([save_path, nc_Filename], 'theta', sonde.th, [1 current_ind])
ncwrite([save_path, nc_Filename], 'theta_e', sonde.the, [1 current_ind])
ncwrite([save_path, nc_Filename], 'u', sonde.u, [1 current_ind])
ncwrite([save_path, nc_Filename], 'v', sonde.v, [1 current_ind])
%----------------------------------------------------------------------------------
%% Write KAZR data
if ~isempty(kazr)
    ncwrite([save_path, nc_Filename], 'lowest_valid_kazr_ind', kazr.lowest_valid_kazr_ind, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'win_c_fraction', kazr.frac, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'win_c_m0_mean', kazr.m0_mean, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'win_c_m0_sd', kazr.m0_sd, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'win_c_m1_mean', kazr.m1_mean, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'win_c_m1_sd', kazr.m1_sd, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'win_c_m2_mean', kazr.m2_mean, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'win_c_m2_sd', kazr.m2_sd, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'win_c_m0_xpol_mean', kazr.m0_xpol_mean, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'win_c_m0_xpol_sd', kazr.m0_xpol_sd, [1 current_ind])
end
%----------------------------------------------------------------------------------
%% Write analysis summary fields.
if ~isempty(kazr)
    ncwrite([save_path, nc_Filename], 'tot_c_mask', summary.c_mask, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'liq_c_mask', summary.l_mask, [1 current_ind])
end
ncwrite([save_path, nc_Filename], 'liq_c_mask_unassign', summary.l_mask_unassigned, [1 current_ind])
if ~isempty(kazr)
    ncwrite([save_path, nc_Filename], 'c_h_bel_top', summary.c_h_bel_top, [1 current_ind])
end
ncwrite([save_path, nc_Filename], 'l_h_bel_top', summary.l_h_bel_top, [1 current_ind])
ncwrite([save_path, nc_Filename], 'sat_rhi_mask', summary.sat_rhi_mask, [1 current_ind])
if ~isempty(kazr)
    ncwrite([save_path, nc_Filename], 'c_num', summary.c_num, [1 current_ind])
end
ncwrite([save_path, nc_Filename], 'l_num', summary.l_num, [1 current_ind])
if ~isempty(kazr)
    ncwrite([save_path, nc_Filename], 'c_thick', summary.c_thick, [1 current_ind])
end
ncwrite([save_path, nc_Filename], 'l_thick', summary.l_thick, [1 current_ind])
if ~isempty(kazr)
    ncwrite([save_path, nc_Filename], 'c_thick_max', summary.c_thick_max, [1 current_ind])
end
ncwrite([save_path, nc_Filename], 'l_thick_max', summary.l_thick_max, [1 current_ind])
if ~isempty(kazr)
    ncwrite([save_path, nc_Filename], 'c_base', summary.c_base, [1 current_ind])
end
ncwrite([save_path, nc_Filename], 'l_base', summary.l_base, [1 current_ind])
if ~isempty(kazr)
    ncwrite([save_path, nc_Filename], 'c_top', summary.c_top, [1 current_ind])
end
ncwrite([save_path, nc_Filename], 'l_top', summary.l_top, [1 current_ind])
if ~isempty(kazr)
    ncwrite([save_path, nc_Filename], 'l_num_ic', summary.l_num_ic, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'l_num_ic_max', summary.l_num_ic_max, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'l_ind', summary.l_ind, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'l_is_ct', summary.l_is_ct, [1 current_ind])
    ncwrite([save_path, nc_Filename], 'l_is_highest_l_ic', summary.l_is_highest_l_ic, [1 current_ind])
end

